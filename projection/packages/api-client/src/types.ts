/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/healthz": {
    /** Healthz */
    get: operations["healthz_healthz_get"];
  };
  "/monte-carlo": {
    /** Run Monte Carlo */
    post: operations["run_monte_carlo_monte_carlo_post"];
  };
  "/": {
    /** Read Root */
    get: operations["read_root__get"];
  };
  "/calculate": {
    /** Calculate Projection */
    post: operations["calculate_projection_calculate_post"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * MonteCarloInput
     * @description Input for Monte Carlo 401(k) simulation.
     */
    MonteCarloInput: {
      /**
       * Current Age
       * @description Current age of participant (years)
       * @example 35
       */
      current_age: number;
      /**
       * Retire Age
       * @description Retirement age (years)
       * @example 65
       */
      retire_age: number;
      /**
       * Current Balance
       * @description Current 401(k) balance ($)
       * @example 50000
       */
      current_balance: number;
      /**
       * Annual Contrib
       * @description Annual employee contribution ($)
       * @example 10000
       */
      annual_contrib: number;
      /**
       * Employer Match Rate
       * @description Employer match rate (decimal, e.g. 0.5 for 50%)
       * @default 0
       * @example 0.5
       */
      employer_match_rate?: number;
      /**
       * Expected Return
       * @description Expected mean annual return (nominal, decimal, e.g. 0.07)
       * @example 0.07
       */
      expected_return: number;
      /**
       * Return Volatility
       * @description Annual return volatility (stdev, decimal, e.g. 0.15)
       * @example 0.15
       */
      return_volatility: number;
      /**
       * Inflation
       * @description Annual inflation rate (decimal)
       * @default 0.02
       * @example 0.02
       */
      inflation?: number;
      /**
       * Salary Growth
       * @description Annual salary/contribution growth (decimal)
       * @default 0.03
       * @example 0.03
       */
      salary_growth?: number;
      /**
       * N Paths
       * @description Number of Monte Carlo paths
       * @default 10000
       * @example 10000
       */
      n_paths?: number;
      /**
       * Seed
       * @description Random seed for reproducibility
       * @default 42
       * @example 42
       */
      seed?: number | null;
      /**
       * Fees Annual
       * @description Annual fee (expense ratio/advisory, decimal)
       * @default 0
       * @example 0.005
       */
      fees_annual?: number;
      /**
       * Glidepath
       * @description Reduce risk as age increases (glidepath)
       * @default false
       * @example false
       */
      glidepath?: boolean;
      /**
       * Rebalance Annually
       * @description Rebalance portfolio annually
       * @default true
       * @example true
       */
      rebalance_annually?: boolean;
      /**
       * Target Goal
       * @description Optional retirement goal (see TargetGoal)
       */
      target_goal?: {
        [key: string]: unknown;
      } | null;
    };
    /** MonteCarloResponse */
    MonteCarloResponse: {
      /** Percentiles */
      percentiles: {
        [key: string]: number;
      };
      /** Final Balances Nominal */
      final_balances_nominal: {
        [key: string]: number;
      };
      /** Final Balances Real */
      final_balances_real: {
        [key: string]: number;
      };
      /** Success Probability */
      success_probability?: number | null;
      /** Sample Path */
      sample_path: {
          [key: string]: number;
        }[];
    };
    /** ProjectionInput */
    ProjectionInput: {
      /** Initialbalance */
      initialBalance: number;
      /** Annualcontribution */
      annualContribution: number;
      /** Years */
      years: number;
      /** Annualreturn */
      annualReturn: number;
      /** Inflation */
      inflation: number;
    };
    /** ProjectionResult */
    ProjectionResult: {
      /** Nominalbalances */
      nominalBalances: number[];
      /** Realbalances */
      realBalances: number[];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Healthz */
  healthz_healthz_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Run Monte Carlo */
  run_monte_carlo_monte_carlo_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MonteCarloInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MonteCarloResponse"];
        };
      };
      /** @description Validation error with friendly message. */
      422: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Read Root */
  read_root__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Calculate Projection */
  calculate_projection_calculate_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProjectionInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectionResult"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
